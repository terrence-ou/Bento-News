name: Release
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get package version
        id: version
        run: |
          VERSION=$(node -p -e "require('./package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Decode Signing Certificate
        run: |
          echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        env:
          APPLE_DEVELOPER_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Build and Notarize
        run: npm run make -- --arch ${{ matrix.arch }}
        env:
          VITE_APPLE_ID: ${{ secrets.VITE_APPLE_ID }}
          VITE_APPLE_PASSWORD: ${{ secrets.VITE_APPLE_PASSWORD }}
          VITE_TEAM_ID: ${{ secrets.VITE_TEAM_ID }}

      - name: Check Release Status
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Check if tag exists
              try {
                const { data: tag } = await github.rest.git.getRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/v${process.env.VERSION}`
                });
                if (tag) {
                  // Tag exists, now check for release
                  const { data: releases } = await github.rest.repos.listReleases({
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  });
                  console.log("releases:",releases);
                  const release = releases.find(r => r.tag_name === `v${process.env.VERSION}`);
                  if (release) {
                    core.setOutput('exists', 'true');
                    core.setOutput('upload_url', release.upload_url);
                    return;
                  }
                }
              } catch (error) {
                if (error.status !== 404) {
                  throw error;
                }
              }
              
              // If we get here, either tag or release doesn't exist
              core.setOutput('exists', 'false');
              core.setOutput('upload_url', '');
            } catch (error) {
              core.setFailed(`Failed to check release/tag: ${error.message}`);
              throw error;
            }

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.result.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: v${{ steps.version.outputs.version }}
          draft: true
          prerelease: true

      - name: Set Upload URL
        id: set_upload_url
        run: |
          UPLOAD_URL=""
          if [[ "${{ fromJSON(steps.check_release.outputs.result).exists }}" == "true" ]]; then
            UPLOAD_URL="${{ fromJSON(steps.check_release.outputs.result).upload_url }}"
          else
            UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          fi
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./out/make/zip/darwin/${{ matrix.arch }}/BentoNews-darwin-${{ matrix.arch }}-${{ env.VERSION }}.zip
          asset_name: BentoNews-${{ matrix.arch }}.zip
          asset_content_type: application/zip
