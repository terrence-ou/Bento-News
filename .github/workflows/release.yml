name: CD
on:
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest]
        arch: [x64, arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Github checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci

      - name: Install Depencies
        run: npm install

      - name: Decode Signing Certificate
        run: |
          echo $APPLE_DEVELOPER_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
        env:
          APPLE_DEVELOPER_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Build and Notarize
        run: npm run make -- --arch ${{ matrix.arch }}
        env:
          VITE_APPLE_ID: ${{ secrets.VITE_APPLE_ID }}
          VITE_APPLE_PASSWORD: ${{ secrets.VITE_APPLE_PASSWORD }}
          VITE_TEAM_ID: ${{ secrets.VITE_TEAM_ID }}

      - name: List out directory contents
        run: ls -la out

      - name: Get package version
        id: get_version
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV

      - name: Check if Release Exists
        id: check_release
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          script: |
            try {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              const release = releases.find(release => release.tag_name === `v${process.env.VERSION}`);
              if (release) {
                await core.exportVariable('RELEASE_EXISTS', 'true');
                await core.exportVariable('UPLOAD_URL', release.upload_url);
              } else {
                await core.exportVariable('RELEASE_EXISTS', 'false');
              }
            } catch (error) {
              core.setFailed(`Failed to check release: ${error.message}`);
            }

      - name: Create Release
        id: create_release
        if: env.RELEASE_EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          draft: true
          prerelease: true

      - name: Set Upload URL
        run: |
          if [ "${{ env.RELEASE_EXISTS }}" == "true" ]; then
            echo "UPLOAD_URL=${{ env.UPLOAD_URL }}" >> $GITHUB_ENV
          else
            echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
          fi

      - name: Upload x64 Zip Release Asset
        if: matrix.arch == 'x64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./out/make/zip/darwin/x64/BentoNews-darwin-x64-${{ env.VERSION }}.zip
          asset_name: BentoNews-x64.zip
          asset_content_type: application/zip

      - name: Upload arm64 Zip Release Asset
        if: matrix.arch == 'arm64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./out/make/zip/darwin/arm64/BentoNews-darwin-arm64-${{ env.VERSION }}.zip
          asset_name: BentoNews-arm64.zip
          asset_content_type: application/zip
